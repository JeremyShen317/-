447. 回旋镖的数量
给定平面上 n 对 互不相同 的点 points ，其中 points[i] = [xi, yi] 。回旋镖 是由点 (i, j, k) 表示的元组 ，其中 i 和 j 之间的距离和 i 和 k 之间的距离相等（需要考虑元组的顺序）。

返回平面上所有回旋镖的数量。

 
示例 1：

输入：points = [[0,0],[1,0],[2,0]]
输出：2
解释：两个回旋镖为 [[1,0],[0,0],[2,0]] 和 [[1,0],[2,0],[0,0]]
示例 2：

输入：points = [[1,1],[2,2],[3,3]]
输出：2
示例 3：

输入：points = [[1,1]]
输出：0
 

提示：

n == points.length
1 <= n <= 500
points[i].length == 2
-104 <= xi, yi <= 104
所有点都 互不相同

解析
对于某一点，利用map记录，以距离为key，到这一点距离为key的数量为value，对于到假设到该点距离为x的数量为n，则有n*(n-1)个回旋镖组合,求和即为结果。

代码如下：
class Solution {
public:
    int numberOfBoomerangs(vector<vector<int>>& points) {
        int n = points.size();
        int ans = 0;
        
        unordered_map<int, int> mp;

        for (int i = 0; i < n; i++) {
            mp.clear();
            for (int j = 0; j < n; j++) {
                if (i == j) continue;
                int x = (points[i][0] - points[j][0]) * (points[i][0] - points[j][0]);
                int y = (points[i][1] - points[j][1]) * (points[i][1] - points[j][1]);
                mp[x+y]++;
            }
            for (auto p: mp) {
                ans += p.second * (p.second - 1);
            }
        }

        return ans;
    }
};
