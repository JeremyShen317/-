212. 单词搜索 II
给定一个 m x n 二维字符网格 board 和一个单词（字符串）列表 words，找出所有同时在二维网格和字典中出现的单词。

单词必须按照字母顺序，通过 相邻的单元格 内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母在一个单词中不允许被重复使用。

示例 1：

输入：board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]], words = ["oath","pea","eat","rain"]
输出：["eat","oath"]
示例 2：

输入：board = [["a","b"],["c","d"]], words = ["abcb"]
输出：[]
 

提示：

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] 是一个小写英文字母
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] 由小写英文字母组成
words 中的所有字符串互不相同

解析：
今天的每日一题，做的让人很畅快，一步步改进，一步步优化，从超时到AC，从AC到超越100%
刚拿到题数据量才12*12，上来就是哈希表查询+回溯法暴力，果不其然超时了
算了一下时间复杂度约为O(M*N*4^10)，铁超时，有的时候真的是不算不知道，一算吓一跳，困难果然还是需要思考一下。
于是我对回溯算法进行了剪枝，加入了单词长度的判断作为第一重优化，勉强AC了，但是还是不满意，于是有了以下优化。
优化1
前缀树（字典树）代替哈希表
使用哈希表查询，只能在每次得到一个完整的单词的时候查询是否存在，而前缀树，可以在每次获得字母的时候判断这条路能不能组成一个单词，大大降低了时间复杂度。

简单说一下前缀树的数据结构，以每个字母为节点值，isWord判断是否组成单词，next指针数组为下一个字母。
struct PreTree{
        PreTree* next[26];
        char val;
        bool isWord;
        PreTree():isWord(false){
            for (int i=0; i<26; i++) next[i]=nullptr;
        };
        PreTree(char ch):val(ch),isWord(false){
            for (int i=0; i<26; i++) next[i]=nullptr;
        };
    };
所以在一开始建树，在回溯的时候加入next是否为空判断，大大降低了时间复杂度，可以直接AC了，代码如下
class Solution {
public:
    vector<string> res;
    struct PreTree{
        PreTree* next[26];
        char val;
        bool isWord;
        PreTree():isWord(false){
            for (int i=0; i<26; i++) next[i]=nullptr;
        };
        PreTree(char ch):val(ch),isWord(false){
            for (int i=0; i<26; i++) next[i]=nullptr;
        };
    };

    void buildTree(PreTree* root,vector<string>& words)
    {
        for (auto& word : words)
        {
            //cout << word << endl;
            PreTree* node=root;
            int i=0;
            while (i<word.size() && node->next[word[i]-'a']!=nullptr)
            {
                //cout << node->val << endl;
                node=node->next[word[i]-'a'];
                i++;
            }
            while (i<word.size())
            {
                //PreTree* cur=new PreTree(word[i]);
                node->next[word[i]-'a'] = new PreTree(word[i]);
                node=node->next[word[i]-'a'];
                i++;
            }
            node->isWord=true;
        }
    }

    void search(int i,int j,string& s,PreTree* node,vector<vector<char>>& board,vector<vector<bool>>& used)
    {
        
        if (!node || used[i][j]) return;
        used[i][j]=true;
        s+=node->val;
        if (node->isWord) {
            res.push_back(s);
            node->isWord=false;
        }

        if (i+1<board.size())    search(i+1,j,s,node->next[board[i+1][j]-'a'],board,used);
        if (j+1<board[0].size()) search(i,j+1,s,node->next[board[i][j+1]-'a'],board,used);
        if (i-1>=0)               search(i-1,j,s,node->next[board[i-1][j]-'a'],board,used);
        if (j-1>=0)               search(i,j-1,s,node->next[board[i][j-1]-'a'],board,used);

        s.erase(s.size()-1,1);
        used[i][j]=false;
    }

    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
        unordered_set<string> st;
        PreTree* root=new PreTree('0');
        buildTree(root,words);

        for (int i=0; i<board.size(); i++)
            for (int j=0; j<board[0].size(); j++)
            if (root->next[board[i][j]-'a'])
            {
                vector<vector<bool>> used(board.size(),vector<bool>(board[0].size(),false));
                string s="";
                search(i,j,s,root->next[board[i][j]-'a'],board,used);
            }
        
        return res;
    }
};

优化2：
细心的小伙伴已经发现，上面的代码已经做了第二个优化。
在回溯搜索是否组成单词的过程中，我本来是用set来去重，最后将set转成vector进行输出，对于部分重复字母较多的测试用例，查询set会花费很多的开销
因此，我在回溯中加入了在第一次找到该单词时，修改前缀树的isWord为false，将set改为了vector，用前缀树直接去重，进一步优化，击败100%。
代码其实就是上面贴的，嘻嘻
