162. 寻找峰值
峰值元素是指其值严格大于左右相邻值的元素。

给你一个整数数组 nums，找到峰值元素并返回其索引。数组可能包含多个峰值，在这种情况下，返回 任何一个峰值 所在位置即可。

你可以假设 nums[-1] = nums[n] = -∞ 。

你必须实现时间复杂度为 O(log n) 的算法来解决此问题。

 

示例 1：

输入：nums = [1,2,3,1]
输出：2
解释：3 是峰值元素，你的函数应该返回其索引 2。
示例 2：

输入：nums = [1,2,1,3,5,6,4]
输出：1 或 5 
解释：你的函数可以返回索引 1，其峰值元素为 2；
     或者返回索引 5， 其峰值元素为 6。
 

提示：

1 <= nums.length <= 1000
-231 <= nums[i] <= 231 - 1
对于所有有效的 i 都有 nums[i] != nums[i + 1]

解析：
由于数据量才1000，一开始使用一遍遍历的方法，注意一下两个边界，时间复杂度为O(N)。
题中说道时间复杂度要达到log(N)，想到了二分，那么二分可行吗？
对于原始数组，其两边a[-1] a[n]为负无穷，也就是两边端点的值必定大于两边界，那么可以推论出如果a[n]>a[n+1]，n的左边必定存在峰值，同理 a[n-1]<a[n]，n的右边必定存在峰值。
因此二分的条件为a[mid]与a[mid+1] a[mid-1]比较，取比a[mid]大的一边即可
代码如下：
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int l = 0;
        int r = nums.size() - 1;

        // 二分法 [l, r] 永远表示查询之后仍然可能的范围
        while (l < r) {
            int mid = (l + r) / 2;

            // nums[-1] = nums[n] = -∞
            if (nums[mid] < nums[mid+1]) {
                // 如果 mid + 1 更大， 说明 mid 之后肯定还在爬升，mid+1 之后有峰
                l = mid + 1;
            } else {
                // 如果 mid 更大， 说明 mid 之前有峰
                r = mid;
            }
        }

        // 条件退出的时候 l 和 r 相等， 而我们始终保持 [l, r] 内有峰。 所以，r就是峰所在的位置。

        return r;
    }
};
