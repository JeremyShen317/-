678. 有效的括号字符串
给定一个只包含三种字符的字符串：（ ，） 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：

任何左括号 ( 必须有相应的右括号 )。
任何右括号 ) 必须有相应的左括号 ( 。
左括号 ( 必须在对应的右括号之前 )。
* 可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。
一个空字符串也被视为有效字符串。
示例 1:

输入: "()"
输出: True
示例 2:

输入: "(*)"
输出: True
示例 3:

输入: "(*))"
输出: True
注意:

字符串大小将在 [1，100] 范围内。

解析：
模拟即可。
一个stack记录 ( （注意需要记录左括号下标）
一个vector记录*（同样记录下标）
如果遇到 ) ，优先使用 ( 匹配：出栈即可。如果 ( 没有了，使用 * 匹配即可。
最后还存在 ( 和 * 匹配，注意 * 在 ( 右侧才能与之匹配
如果最后 ( 栈为空则匹配成功，反之则匹配失败。

代码如下：
class Solution {
public:
    bool checkValidString(string s) {
        stack<int>st;                           //栈存储“（”的位置
        vector<int>pos;                         //数组存储“*”的位置
        for(int i=0;i<s.size();i++){
            if(s[i]=='(') st.push(i);
            else if(s[i]==')'){
                if(!st.empty()){                //如果有左括号相对应，优先出栈
                    st.pop();
                }
                else{
                    if(!pos.empty()){           //如果没有左括号相对应，令星号与之相对应
                        pos.pop_back();
                    }
                    else return false;          //如果没有左括号和相对应，return false
                }
            }
            else{
                pos.push_back(i);               //如果是星号，存入数组
            }
        }
        while(!pos.empty()&&!st.empty()){       //如果栈未空且数组未空
            if(pos.back()>st.top()){            //如果星号的位置在左括号的右边，则可以与左括号对应
                st.pop();
            }
            pos.pop_back();
        }
        return st.empty();
    }
};
